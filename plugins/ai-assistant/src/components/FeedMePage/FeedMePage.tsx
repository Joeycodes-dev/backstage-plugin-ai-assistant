import { useState } from 'react';
import { Content, Page } from '@backstage/core-components';
import { Box, Button, TextField, Typography } from '@mui/material';
// import 'react-quill/dist/quill.snow.css';
// import ReactQuill from 'react-quill';
import ExpertUserAutoComplete, { ExpertType } from './ExpertUserAutoComplete';
import MDEditor from '@uiw/react-md-editor';
import rehypeSanitize from 'rehype-sanitize';

export const FeedMePage = () => {
  // Backup method to submit to Postgres
  const backupSubmitToPostgres = async () => {
    // Compose fullContent from question and answer
    const fullContent = `Q: ${question}\nA: ${value}`;
    const payload = {
      // ID would be auto-generated by the DB
      fullContent,
      approved: false, // since this is for Approve
      owner: '', // TODO: set owner (e.g., current user)
      expert: approver?.user.displayName || '',
    };
    try {
      // Replace with your real Postgres API endpoint later
      const response = await fetch('https://api.example.com/postgres-backup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        throw new Error('Failed to backup to Postgres');
      }
      alert('Backup to Postgres successful!');
    } catch (error) {
      alert('Backup to Postgres failed: ' + (error as Error).message);
    }
  };

  // Placeholder API submit function
  const handleApprove = async () => {
    const payload = {
      question,
      answer: value,
      approver: approver?.user.displayName || null,
    };
    try {
      // Replace with your real API endpoint later
      const response = await fetch('https://api.example.com/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        throw new Error('Failed to submit');
      }
      // Optionally handle success (e.g., show a message)
      alert('Submission successful!');
    } catch (error) {
      alert('Submission failed: ' + (error as Error).message);
    }
  };
  const [value, setValue] = useState(''); // Answer markdown
  const [question, setQuestion] = useState(''); // Original question
  const [approver, setApprover] = useState<ExpertType | null>(null); // Approver user

  return (
    <Page themeId="home">
      <Content>
        <Typography variant="h4" gutterBottom>
          Feed Platty
        </Typography>

        <Typography variant="body1">
          Provide input to help Platty learn and improve its responses.
        </Typography>

        <Box my={2}>
          <TextField
            fullWidth
            label="Original Question asked?"
            variant="outlined"
            helperText="This helps Platty understand the context of your answer."
            value={question}
            onChange={e => setQuestion(e.target.value)}
          />
        </Box>

        <Box mb={8}>
          <Typography variant="body1" gutterBottom>
            Answer the question in detail:
          </Typography>

          {/* <ReactQuill
            theme="snow"
            value={value}
            onChange={setValue}
            style={{ height: '200px', color: 'white' }}
          /> */}

          <MDEditor
            value={value}
            onChange={val => setValue(val ?? '')}
            previewOptions={{
              rehypePlugins: [[rehypeSanitize]],
            }}
          />
          <MDEditor.Markdown
            source={value}
            style={{ whiteSpace: 'pre-wrap' }}
          />
        </Box>

        <Box my={2}>
          <Typography variant="body1" gutterBottom>
            Who should approve this answer?
          </Typography>
          <ExpertUserAutoComplete value={approver} onChange={setApprover} />
        </Box>

        <Box display="flex" justifyContent="flex-end" gap={2} mr={2} mb={2}>
          <Button variant="contained" color="success">
            Submit
          </Button>
        </Box>

        <Box display="flex" justifyContent="flex-end" gap={2} mr={2}>
          <Button variant="contained" color="error">
            Reject
          </Button>

          <Button variant="contained" color="success" onClick={handleApprove}>
            Approve
          </Button>
          {/* <Button
            variant="outlined"
            color="info"
            onClick={backupSubmitToPostgres}
          >
            Backup to Postgres
          </Button> */}
        </Box>
      </Content>
    </Page>
  );
};
